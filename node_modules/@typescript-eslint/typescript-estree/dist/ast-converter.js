"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const convert_1 = require("./convert");
const convert_comments_1 = require("./convert-comments");
const node_utils_1 = require("./node-utils");
<<<<<<< HEAD
<<<<<<< HEAD
function astConverter(ast, extra, shouldProvideParserServices) {
=======
const simple_traverse_1 = require("./simple-traverse");
function astConverter(ast, extra, shouldPreserveNodeMaps) {
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
const simple_traverse_1 = require("./simple-traverse");
function astConverter(ast, extra, shouldPreserveNodeMaps) {
=======
function astConverter(ast, extra, shouldProvideParserServices) {
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    /**
     * The TypeScript compiler produced fundamental parse errors when parsing the
     * source.
     */
<<<<<<< HEAD
<<<<<<< HEAD
    if (ast.parseDiagnostics.length) {
        throw convert_1.convertError(ast.parseDiagnostics[0]);
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
    // internal typescript api...
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const parseDiagnostics = ast.parseDiagnostics;
    if (parseDiagnostics.length) {
        throw convert_1.convertError(parseDiagnostics[0]);
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
    if (ast.parseDiagnostics.length) {
        throw convert_1.convertError(ast.parseDiagnostics[0]);
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    }
    /**
     * Recursively convert the TypeScript AST into an ESTree-compatible AST
     */
    const instance = new convert_1.Converter(ast, {
        errorOnUnknownASTType: extra.errorOnUnknownASTType || false,
        useJSXTextNode: extra.useJSXTextNode || false,
<<<<<<< HEAD
<<<<<<< HEAD
        shouldProvideParserServices,
    });
    const estree = instance.convertProgram();
    /**
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
        shouldPreserveNodeMaps,
    });
    const estree = instance.convertProgram();
    /**
     * Optionally remove range and loc if specified
     */
    if (!extra.range || !extra.loc) {
        simple_traverse_1.simpleTraverse(estree, {
            enter: node => {
                if (!extra.range) {
                    delete node.range;
                }
                if (!extra.loc) {
                    delete node.loc;
                }
            },
        });
    }
    /**
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
        shouldProvideParserServices,
    });
    const estree = instance.convertProgram();
    /**
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
     * Optionally convert and include all tokens in the AST
     */
    if (extra.tokens) {
        estree.tokens = node_utils_1.convertTokens(ast);
    }
    /**
     * Optionally convert and include all comments in the AST
     */
    if (extra.comment) {
        estree.comments = convert_comments_1.convertComments(ast, extra.code);
    }
<<<<<<< HEAD
<<<<<<< HEAD
    const astMaps = shouldProvideParserServices
        ? instance.getASTMaps()
        : undefined;
    return { estree, astMaps };
}
exports.default = astConverter;
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
    const astMaps = shouldPreserveNodeMaps ? instance.getASTMaps() : undefined;
    return { estree, astMaps };
}
exports.astConverter = astConverter;
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
    const astMaps = shouldProvideParserServices
        ? instance.getASTMaps()
        : undefined;
    return { estree, astMaps };
}
exports.default = astConverter;
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
//# sourceMappingURL=ast-converter.js.map