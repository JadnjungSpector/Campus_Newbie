<<<<<<< HEAD
<<<<<<< HEAD
import { TSESTree } from './ts-estree';
import { ParserOptions, ParserServices } from './parser-options';
declare type AST<T extends ParserOptions> = TSESTree.Program & (T['range'] extends true ? {
    range: [number, number];
} : {}) & (T['tokens'] extends true ? {
=======
import { TSESTreeOptions, ParserServices } from './parser-options';
import { TSESTree } from './ts-estree';
declare type AST<T extends TSESTreeOptions> = TSESTree.Program & (T['tokens'] extends true ? {
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
import { TSESTreeOptions, ParserServices } from './parser-options';
import { TSESTree } from './ts-estree';
declare type AST<T extends TSESTreeOptions> = TSESTree.Program & (T['tokens'] extends true ? {
=======
import { TSESTree } from './ts-estree';
import { ParserOptions, ParserServices } from './parser-options';
declare type AST<T extends ParserOptions> = TSESTree.Program & (T['range'] extends true ? {
    range: [number, number];
} : {}) & (T['tokens'] extends true ? {
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    tokens: TSESTree.Token[];
} : {}) & (T['comment'] extends true ? {
    comments: TSESTree.Comment[];
} : {});
<<<<<<< HEAD
<<<<<<< HEAD
export interface ParseAndGenerateServicesResult<T extends ParserOptions> {
    ast: AST<T>;
    services: ParserServices;
}
export declare const version: string;
export declare function parse<T extends ParserOptions = ParserOptions>(code: string, options?: T): AST<T>;
export declare function parseAndGenerateServices<T extends ParserOptions = ParserOptions>(code: string, options: T): ParseAndGenerateServicesResult<T>;
export { AST_NODE_TYPES, AST_TOKEN_TYPES, TSESTree } from './ts-estree';
export { ParserOptions, ParserServices };
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
interface ParseAndGenerateServicesResult<T extends TSESTreeOptions> {
    ast: AST<T>;
    services: ParserServices;
}
declare const version: string;
declare function parse<T extends TSESTreeOptions = TSESTreeOptions>(code: string, options?: T): AST<T>;
declare function parseAndGenerateServices<T extends TSESTreeOptions = TSESTreeOptions>(code: string, options: T): ParseAndGenerateServicesResult<T>;
export { AST, parse, parseAndGenerateServices, ParseAndGenerateServicesResult, version, };
export { ParserServices, TSESTreeOptions } from './parser-options';
export { simpleTraverse } from './simple-traverse';
export { visitorKeys } from './visitor-keys';
export * from './ts-estree';
export { clearCaches } from './create-program/createWatchProgram';
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
export interface ParseAndGenerateServicesResult<T extends ParserOptions> {
    ast: AST<T>;
    services: ParserServices;
}
export declare const version: string;
export declare function parse<T extends ParserOptions = ParserOptions>(code: string, options?: T): AST<T>;
export declare function parseAndGenerateServices<T extends ParserOptions = ParserOptions>(code: string, options: T): ParseAndGenerateServicesResult<T>;
export { AST_NODE_TYPES, AST_TOKEN_TYPES, TSESTree } from './ts-estree';
export { ParserOptions, ParserServices };
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
//# sourceMappingURL=parser.d.ts.map