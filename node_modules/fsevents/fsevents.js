/*
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
** © 2018 by Philipp Dunkel, Ben Noordhuis, Elan Shankar
** Licensed under MIT License.
*/
=======
 ** © 2018 by Philipp Dunkel, Ben Noordhuis, Elan Shankar, Paul Miller
 ** Licensed under MIT License.
 */
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
 ** © 2018 by Philipp Dunkel, Ben Noordhuis, Elan Shankar, Paul Miller
 ** Licensed under MIT License.
 */
=======
** © 2018 by Philipp Dunkel, Ben Noordhuis, Elan Shankar
** Licensed under MIT License.
*/
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
** © 2018 by Philipp Dunkel, Ben Noordhuis, Elan Shankar
** Licensed under MIT License.
*/
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)

/* jshint node:true */
'use strict';

if (process.platform !== 'darwin') {
  throw new Error(`Module 'fsevents' is not compatible with platform '${process.platform}'`);
}

const Native = require('./fsevents.node');
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
const con = Native.constants;

function watch(path, handler) {
  if ('string' !== typeof path) throw new TypeError(`argument 1 must be a string and not a ${typeof path}`);
  if ('function' !== typeof handler) throw new TypeError(`argument 2 must be a function and not a ${typeof handler}`);
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
const events = Native.constants;

function watch(path, handler) {
  if (typeof path !== 'string') {
    throw new TypeError(`fsevents argument 1 must be a string and not a ${typeof path}`);
  }
  if (typeof handler !== 'function') {
    throw new TypeError(`fsevents argument 2 must be a function and not a ${typeof handler}`);
  }
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
const con = Native.constants;

function watch(path, handler) {
  if ('string' !== typeof path) throw new TypeError(`argument 1 must be a string and not a ${typeof path}`);
  if ('function' !== typeof handler) throw new TypeError(`argument 2 must be a function and not a ${typeof handler}`);
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)

  let instance = Native.start(path, handler);
  if (!instance) throw new Error(`could not watch: ${path}`);
  return () => {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    const result = instance ? Promise.resolve(instance).then(Native.stop) : null;
    instance = null;
    return result;
  };
}
function getInfo(path, flags) {
  return {
    path, flags,
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
    const result = instance
      ? Promise.resolve(instance).then(Native.stop)
      : Promise.resolve(undefined);
    instance = undefined;
    return result;
  };
}

function getInfo(path, flags) {
  return {
    path,
    flags,
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
    const result = instance ? Promise.resolve(instance).then(Native.stop) : null;
    instance = null;
    return result;
  };
}
function getInfo(path, flags) {
  return {
    path, flags,
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    event: getEventType(flags),
    type: getFileType(flags),
    changes: getFileChanges(flags)
  };
}

function getFileType(flags) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  if (con.kFSEventStreamEventFlagItemIsFile & flags) return 'file';
  if (con.kFSEventStreamEventFlagItemIsDir & flags) return 'directory';
  if (con.kFSEventStreamEventFlagItemIsSymlink & flags) return 'symlink';
}
function getEventType(flags) {
  if (con.kFSEventStreamEventFlagItemRemoved & flags) return 'deleted';
  if (con.kFSEventStreamEventFlagItemRenamed & flags) return 'moved';
  if (con.kFSEventStreamEventFlagItemCreated & flags) return 'created';
  if (con.kFSEventStreamEventFlagItemModified & flags) return 'modified';
  if (con.kFSEventStreamEventFlagRootChanged & flags) return 'root-changed';

=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
  if (events.ItemIsFile & flags) return 'file';
  if (events.ItemIsDir & flags) return 'directory';
  if (events.ItemIsSymlink & flags) return 'symlink';
}
function anyIsTrue(obj) {
  for (let key in obj) {
    if (obj[key]) return true;
  }
  return false;
}
function getEventType(flags) {
  if (events.ItemRemoved & flags) return 'deleted';
  if (events.ItemRenamed & flags) return 'moved';
  if (events.ItemCreated & flags) return 'created';
  if (events.ItemModified & flags) return 'modified';
  if (events.RootChanged & flags) return 'root-changed';
  if (events.ItemCloned & flags) return 'cloned';
  if (anyIsTrue(flags)) return 'modified';
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
  if (con.kFSEventStreamEventFlagItemIsFile & flags) return 'file';
  if (con.kFSEventStreamEventFlagItemIsDir & flags) return 'directory';
  if (con.kFSEventStreamEventFlagItemIsSymlink & flags) return 'symlink';
}
function getEventType(flags) {
  if (con.kFSEventStreamEventFlagItemRemoved & flags) return 'deleted';
  if (con.kFSEventStreamEventFlagItemRenamed & flags) return 'moved';
  if (con.kFSEventStreamEventFlagItemCreated & flags) return 'created';
  if (con.kFSEventStreamEventFlagItemModified & flags) return 'modified';
  if (con.kFSEventStreamEventFlagRootChanged & flags) return 'root-changed';

<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
  return 'unknown';
}
function getFileChanges(flags) {
  return {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    inode: !!(con.kFSEventStreamEventFlagItemInodeMetaMod & flags),
    finder: !!(con.kFSEventStreamEventFlagItemFinderInfoMod & flags),
    access: !!(con.kFSEventStreamEventFlagItemChangeOwner & flags),
    xattrs: !!(con.kFSEventStreamEventFlagItemXattrMod & flags)
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
    inode: !!(events.ItemInodeMetaMod & flags),
    finder: !!(events.ItemFinderInfoMod & flags),
    access: !!(events.ItemChangeOwner & flags),
    xattrs: !!(events.ItemXattrMod & flags)
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
    inode: !!(con.kFSEventStreamEventFlagItemInodeMetaMod & flags),
    finder: !!(con.kFSEventStreamEventFlagItemFinderInfoMod & flags),
    access: !!(con.kFSEventStreamEventFlagItemChangeOwner & flags),
    xattrs: !!(con.kFSEventStreamEventFlagItemXattrMod & flags)
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
  };
}

exports.watch = watch;
exports.getInfo = getInfo;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
exports.constants = con;
=======
exports.constants = events;
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
exports.constants = events;
=======
exports.constants = con;
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
exports.constants = con;
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
