"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));

<<<<<<< HEAD
=======
var _utils = require("../utils");

>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const pluginName = 'postcss-url-parser';
const isUrlFunc = /url/i;
const isImageSetFunc = /^(?:-webkit-)?image-set$/i;
const needParseDecl = /(?:url|(?:-webkit-)?image-set)\(/i;

function getNodeFromUrlFunc(node) {
  return node.nodes && node.nodes[0];
}

<<<<<<< HEAD
function getUrlFromUrlFunc(node) {
  return node.nodes.length !== 0 && node.nodes[0].type === 'string' ? node.nodes[0].value : _postcssValueParser.default.stringify(node.nodes);
}

=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
function walkUrls(parsed, callback) {
  parsed.walk(node => {
    if (node.type !== 'function') {
      return;
    }

    if (isUrlFunc.test(node.value)) {
<<<<<<< HEAD
      callback(getNodeFromUrlFunc(node), getUrlFromUrlFunc(node), false); // Do not traverse inside `url`
=======
      const {
        nodes
      } = node;
      const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';
      const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);
      callback(getNodeFromUrlFunc(node), url, false, isStringValue); // Do not traverse inside `url`
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
      // eslint-disable-next-line consistent-return

      return false;
    }

    if (isImageSetFunc.test(node.value)) {
      node.nodes.forEach(nNode => {
<<<<<<< HEAD
        if (nNode.type === 'function' && isUrlFunc.test(nNode.value)) {
          callback(getNodeFromUrlFunc(nNode), getUrlFromUrlFunc(nNode), false);
        }

        if (nNode.type === 'string') {
          callback(nNode, nNode.value, true);
=======
        const {
          type,
          value
        } = nNode;

        if (type === 'function' && isUrlFunc.test(value)) {
          const {
            nodes
          } = nNode;
          const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';
          const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);
          callback(getNodeFromUrlFunc(nNode), url, false, isStringValue);
        }

        if (type === 'string') {
          callback(nNode, value, true, true);
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
        }
      }); // Do not traverse inside `image-set`
      // eslint-disable-next-line consistent-return

      return false;
    }
  });
}

<<<<<<< HEAD
function walkDeclsWithUrl(css, result, filter) {
  const items = [];
  css.walkDecls(decl => {
    if (!needParseDecl.test(decl.value)) {
      return;
    }

    const parsed = (0, _postcssValueParser.default)(decl.value);
    const urls = [];
    walkUrls(parsed, (node, url, needQuotes) => {
      if (url.trim().replace(/\\[\r\n]/g, '').length === 0) {
        result.warn(`Unable to find uri in '${decl.toString()}'`, {
          node: decl
        });
        return;
      }

      if (filter && !filter(url)) {
        return;
      }

      urls.push({
        url,
        needQuotes
      });
    });

    if (urls.length === 0) {
=======
function getUrlsFromValue(value, result, filter, decl) {
  if (!needParseDecl.test(value)) {
    return;
  }

  const parsed = (0, _postcssValueParser.default)(value);
  const urls = [];
  walkUrls(parsed, (node, url, needQuotes, isStringValue) => {
    if (url.trim().replace(/\\[\r\n]/g, '').length === 0) {
      result.warn(`Unable to find uri in '${decl ? decl.toString() : value}'`, {
        node: decl
      });
      return;
    }

    if (filter && !filter(url)) {
      return;
    }

    const splittedUrl = url.split(/(\?)?#/);
    const [urlWithoutHash, singleQuery, hashValue] = splittedUrl;
    const hash = singleQuery || hashValue ? `${singleQuery ? '?' : ''}${hashValue ? `#${hashValue}` : ''}` : '';
    const normalizedUrl = (0, _utils.normalizeUrl)(urlWithoutHash, isStringValue);
    urls.push({
      node,
      url: normalizedUrl,
      hash,
      needQuotes
    });
  }); // eslint-disable-next-line consistent-return

  return {
    parsed,
    urls
  };
}

function walkDecls(css, result, filter) {
  const items = [];
  css.walkDecls(decl => {
    const item = getUrlsFromValue(decl.value, result, filter, decl);

    if (!item || item.urls.length === 0) {
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
      return;
    }

    items.push({
      decl,
<<<<<<< HEAD
      parsed,
      urls
=======
      parsed: item.parsed,
      urls: item.urls
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
    });
  });
  return items;
}

<<<<<<< HEAD
function uniqWith(array, comparator) {
  return array.reduce((acc, d) => !acc.some(item => comparator(d, item)) ? [...acc, d] : acc, []);
}

=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
function flatten(array) {
  return array.reduce((a, b) => a.concat(b), []);
}

<<<<<<< HEAD
function isEqual(value, other) {
  return value.url === other.url && value.needQuotes === other.needQuotes;
}

var _default = _postcss.default.plugin(pluginName, (options = {}) => function process(css, result) {
  const traversed = walkDeclsWithUrl(css, result, options.filter);
  const paths = uniqWith(flatten(traversed.map(item => item.urls)), isEqual);

  if (paths.length === 0) {
    return;
  }

  const placeholders = [];
  paths.forEach((path, index) => {
    const placeholder = `___CSS_LOADER_URL___${index}___`;
    const {
      url,
      needQuotes
    } = path;
    placeholders.push({
      placeholder,
      path
    });
    result.messages.push({
      pluginName,
      type: 'url',
      item: {
        url,
        placeholder,
        needQuotes
      }
    });
  });
  traversed.forEach(item => {
    walkUrls(item.parsed, (node, url, needQuotes) => {
      const value = placeholders.find(placeholder => placeholder.path.url === url && placeholder.path.needQuotes === needQuotes);

      if (!value) {
        return;
      }

      const {
        placeholder
      } = value; // eslint-disable-next-line no-param-reassign

      node.type = 'word'; // eslint-disable-next-line no-param-reassign

      node.value = placeholder;
=======
function collectUniqueUrlsWithNodes(array) {
  return array.reduce((accumulator, currentValue) => {
    const {
      url,
      needQuotes,
      hash,
      node
    } = currentValue;
    const found = accumulator.find(item => url === item.url && needQuotes === item.needQuotes && hash === item.hash);

    if (!found) {
      accumulator.push({
        url,
        hash,
        needQuotes,
        nodes: [node]
      });
    } else {
      found.nodes.push(node);
    }

    return accumulator;
  }, []);
}

var _default = _postcss.default.plugin(pluginName, options => function process(css, result) {
  const traversed = walkDecls(css, result, options.filter);
  const flattenTraversed = flatten(traversed.map(item => item.urls));
  const urlsWithNodes = collectUniqueUrlsWithNodes(flattenTraversed);
  const replacers = new Map();
  urlsWithNodes.forEach((urlWithNodes, index) => {
    const {
      url,
      hash,
      needQuotes,
      nodes
    } = urlWithNodes;
    const replacementName = `___CSS_LOADER_URL_REPLACEMENT_${index}___`;
    result.messages.push({
      pluginName,
      type: 'import',
      value: {
        type: 'url',
        replacementName,
        url,
        needQuotes,
        hash
      }
    }, {
      pluginName,
      type: 'replacer',
      value: {
        type: 'url',
        replacementName
      }
    });
    nodes.forEach(node => {
      replacers.set(node, replacementName);
    });
  });
  traversed.forEach(item => {
    walkUrls(item.parsed, node => {
      const replacementName = replacers.get(node);

      if (!replacementName) {
        return;
      } // eslint-disable-next-line no-param-reassign


      node.type = 'word'; // eslint-disable-next-line no-param-reassign

      node.value = replacementName;
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
    }); // eslint-disable-next-line no-param-reassign

    item.decl.value = item.parsed.toString();
  });
});

exports.default = _default;