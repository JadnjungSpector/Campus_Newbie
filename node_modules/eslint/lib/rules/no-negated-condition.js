/**
 * @fileoverview Rule to disallow a negated condition
 * @author Alberto Rodr√≠guez
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

<<<<<<< HEAD
<<<<<<< HEAD
/** @type {import('../shared/types').Rule} */
=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
/** @type {import('../shared/types').Rule} */
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
module.exports = {
    meta: {
        type: "suggestion",

        docs: {
<<<<<<< HEAD
<<<<<<< HEAD
            description: "Disallow negated conditions",
            recommended: false,
            url: "https://eslint.org/docs/latest/rules/no-negated-condition"
        },

        schema: [],

        messages: {
            unexpectedNegated: "Unexpected negated condition."
        }
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
            description: "disallow negated conditions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-negated-condition"
        },

        schema: []
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
            description: "Disallow negated conditions",
            recommended: false,
            url: "https://eslint.org/docs/latest/rules/no-negated-condition"
        },

        schema: [],

        messages: {
            unexpectedNegated: "Unexpected negated condition."
        }
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    },

    create(context) {

        /**
         * Determines if a given node is an if-else without a condition on the else
         * @param {ASTNode} node The node to check.
         * @returns {boolean} True if the node has an else without an if.
         * @private
         */
        function hasElseWithoutCondition(node) {
            return node.alternate && node.alternate.type !== "IfStatement";
        }

        /**
         * Determines if a given node is a negated unary expression
         * @param {Object} test The test object to check.
         * @returns {boolean} True if the node is a negated unary expression.
         * @private
         */
        function isNegatedUnaryExpression(test) {
            return test.type === "UnaryExpression" && test.operator === "!";
        }

        /**
         * Determines if a given node is a negated binary expression
         * @param {Test} test The test to check.
         * @returns {boolean} True if the node is a negated binary expression.
         * @private
         */
        function isNegatedBinaryExpression(test) {
            return test.type === "BinaryExpression" &&
                (test.operator === "!=" || test.operator === "!==");
        }

        /**
         * Determines if a given node has a negated if expression
         * @param {ASTNode} node The node to check.
         * @returns {boolean} True if the node has a negated if expression.
         * @private
         */
        function isNegatedIf(node) {
            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);
        }

        return {
            IfStatement(node) {
                if (!hasElseWithoutCondition(node)) {
                    return;
                }

                if (isNegatedIf(node)) {
<<<<<<< HEAD
<<<<<<< HEAD
                    context.report({
                        node,
                        messageId: "unexpectedNegated"
                    });
=======
                    context.report({ node, message: "Unexpected negated condition." });
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
                    context.report({ node, message: "Unexpected negated condition." });
=======
                    context.report({
                        node,
                        messageId: "unexpectedNegated"
                    });
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
                }
            },
            ConditionalExpression(node) {
                if (isNegatedIf(node)) {
<<<<<<< HEAD
<<<<<<< HEAD
                    context.report({
                        node,
                        messageId: "unexpectedNegated"
                    });
=======
                    context.report({ node, message: "Unexpected negated condition." });
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
                    context.report({ node, message: "Unexpected negated condition." });
=======
                    context.report({
                        node,
                        messageId: "unexpectedNegated"
                    });
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
                }
            }
        };
    }
};
