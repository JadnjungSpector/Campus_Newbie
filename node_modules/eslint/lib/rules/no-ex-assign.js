/**
 * @fileoverview Rule to flag assignment of the exception parameter
 * @author Stephen Murray <spmurrayzzz>
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

<<<<<<< HEAD
<<<<<<< HEAD
/** @type {import('../shared/types').Rule} */
=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
/** @type {import('../shared/types').Rule} */
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
module.exports = {
    meta: {
        type: "problem",

        docs: {
<<<<<<< HEAD
<<<<<<< HEAD
            description: "Disallow reassigning exceptions in `catch` clauses",
            recommended: true,
            url: "https://eslint.org/docs/latest/rules/no-ex-assign"
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
            description: "disallow reassigning exceptions in `catch` clauses",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-ex-assign"
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
            description: "Disallow reassigning exceptions in `catch` clauses",
            recommended: true,
            url: "https://eslint.org/docs/latest/rules/no-ex-assign"
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        },

        schema: [],

        messages: {
            unexpected: "Do not assign to the exception parameter."
        }
    },

    create(context) {

<<<<<<< HEAD
<<<<<<< HEAD
        const sourceCode = context.sourceCode;

=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
        const sourceCode = context.sourceCode;

>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        /**
         * Finds and reports references that are non initializer and writable.
         * @param {Variable} variable A variable to check.
         * @returns {void}
         */
        function checkVariable(variable) {
            astUtils.getModifyingReferences(variable.references).forEach(reference => {
                context.report({ node: reference.identifier, messageId: "unexpected" });
            });
        }

        return {
            CatchClause(node) {
<<<<<<< HEAD
<<<<<<< HEAD
                sourceCode.getDeclaredVariables(node).forEach(checkVariable);
=======
                context.getDeclaredVariables(node).forEach(checkVariable);
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
                context.getDeclaredVariables(node).forEach(checkVariable);
=======
                sourceCode.getDeclaredVariables(node).forEach(checkVariable);
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
            }
        };

    }
};
