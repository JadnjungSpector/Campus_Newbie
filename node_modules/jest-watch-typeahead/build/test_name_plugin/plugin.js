"use strict";

var _jestWatcher = require("jest-watcher");

<<<<<<< HEAD
<<<<<<< HEAD
var _prompt = _interopRequireDefault(require("./prompt"));

=======
=======
>>>>>>> 84b8e337c (figuring out lint)
var _jestRegexUtil = require("jest-regex-util");

var _prompt = _interopRequireDefault(require("./prompt"));

var _utils = require("../lib/utils");

<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
var _prompt = _interopRequireDefault(require("./prompt"));

>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class TestNamePlugin {
  constructor({
    stdin,
    stdout,
    config = {}
  }) {
    this._stdin = stdin;
    this._stdout = stdout;
    this._prompt = new _jestWatcher.Prompt();
    this._testResults = [];
    this._usageInfo = {
      key: config.key || 't',
      prompt: config.prompt || 'filter by a test name regex pattern'
    };
  }

  apply(jestHooks) {
    jestHooks.onTestRunComplete(({
      testResults
    }) => {
      this._testResults = testResults;
    });
  }

  onKey(key) {
    this._prompt.put(key);
  }

  run(globalConfig, updateConfigAndRun) {
    const p = new _prompt.default(this._stdout, this._prompt);
    p.updateCachedTestResults(this._testResults);
    return new Promise((res, rej) => {
      p.run(value => {
        updateConfigAndRun({
          mode: 'watch',
<<<<<<< HEAD
<<<<<<< HEAD
          testNamePattern: value
=======
          testNamePattern: (0, _jestRegexUtil.escapeStrForRegex)((0, _utils.removeTrimmingDots)(value))
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
          testNamePattern: (0, _jestRegexUtil.escapeStrForRegex)((0, _utils.removeTrimmingDots)(value))
=======
          testNamePattern: value
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        });
        res();
      }, rej);
    });
  }

  getUsageInfo() {
    return this._usageInfo;
  }

}

module.exports = TestNamePlugin;