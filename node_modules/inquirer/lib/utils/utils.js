'use strict';
<<<<<<< HEAD
<<<<<<< HEAD
var _ = require('lodash');
=======
var _ = {
  isFunction: require('lodash/isFunction'),
};
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
var _ = {
  isFunction: require('lodash/isFunction'),
};
=======
var _ = require('lodash');
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
var { from, of } = require('rxjs');
var runAsync = require('run-async');

/**
 * Resolve a question property value if it is passed as a function.
 * This method will overwrite the property on the question object with the received value.
 * @param  {Object} question - Question object
 * @param  {String} prop     - Property to fetch name
 * @param  {Object} answers  - Answers object
 * @return {Rx.Observable}   - Observable emitting once value is known
 */

<<<<<<< HEAD
<<<<<<< HEAD
exports.fetchAsyncQuestionProperty = function(question, prop, answers) {
=======
exports.fetchAsyncQuestionProperty = function (question, prop, answers) {
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
exports.fetchAsyncQuestionProperty = function (question, prop, answers) {
=======
exports.fetchAsyncQuestionProperty = function(question, prop, answers) {
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
  if (!_.isFunction(question[prop])) {
    return of(question);
  }

  return from(
<<<<<<< HEAD
<<<<<<< HEAD
    runAsync(question[prop])(answers).then(value => {
=======
    runAsync(question[prop])(answers).then((value) => {
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
    runAsync(question[prop])(answers).then((value) => {
=======
    runAsync(question[prop])(answers).then(value => {
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
      question[prop] = value;
      return question;
    })
  );
};
