"use strict";

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

=======
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = hasAccessibleChild;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var _jsxAstUtils = require("jsx-ast-utils");
var _isHiddenFromScreenReader = _interopRequireDefault(require("./isHiddenFromScreenReader"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function hasAccessibleChild(node, elementType) {
  return node.children.some(function (child) {
    switch (child.type) {
      case 'Literal':
        return !!child.value;
      // $FlowFixMe JSXText is missing in ast-types-flow
      case 'JSXText':
        return !!child.value;
      case 'JSXElement':
        return !(0, _isHiddenFromScreenReader["default"])(elementType(child.openingElement), child.openingElement.attributes);
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)

var _jsxAstUtils = require("jsx-ast-utils");

var _isHiddenFromScreenReader = _interopRequireDefault(require("./isHiddenFromScreenReader"));

function hasAccessibleChild(node) {
  return node.children.some(function (child) {
    switch (child.type) {
      case 'Literal':
      case 'JSXText':
        return Boolean(child.value);

      case 'JSXElement':
        return !(0, _isHiddenFromScreenReader["default"])((0, _jsxAstUtils.elementType)(child.openingElement), child.openingElement.attributes);

<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
var _jsxAstUtils = require("jsx-ast-utils");
var _isHiddenFromScreenReader = _interopRequireDefault(require("./isHiddenFromScreenReader"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function hasAccessibleChild(node, elementType) {
  return node.children.some(function (child) {
    switch (child.type) {
      case 'Literal':
        return !!child.value;
      // $FlowFixMe JSXText is missing in ast-types-flow
      case 'JSXText':
        return !!child.value;
      case 'JSXElement':
        return !(0, _isHiddenFromScreenReader["default"])(elementType(child.openingElement), child.openingElement.attributes);
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
      case 'JSXExpressionContainer':
        if (child.expression.type === 'Identifier') {
          return child.expression.name !== 'undefined';
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        return true;
=======

        return true;

>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)

        return true;

=======
        return true;
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
        return true;
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
      default:
        return false;
    }
  }) || (0, _jsxAstUtils.hasAnyProp)(node.openingElement.attributes, ['dangerouslySetInnerHTML', 'children']);
<<<<<<< HEAD
<<<<<<< HEAD
}
<<<<<<< HEAD
module.exports = exports.default;
=======
}
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
}
module.exports = exports.default;
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
}
module.exports = exports.default;
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
