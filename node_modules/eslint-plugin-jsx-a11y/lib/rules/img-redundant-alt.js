"use strict";

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _jsxAstUtils = require("jsx-ast-utils");
var _arrayIncludes = _interopRequireDefault(require("array-includes"));
var _stringPrototype = _interopRequireDefault(require("string.prototype.includes"));
var _safeRegexTest = _interopRequireDefault(require("safe-regex-test"));
var _schemas = require("../util/schemas");
var _getElementType = _interopRequireDefault(require("../util/getElementType"));
var _isHiddenFromScreenReader = _interopRequireDefault(require("../util/isHiddenFromScreenReader"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _jsxAstUtils = require("jsx-ast-utils");

var _schemas = require("../util/schemas");

var _isHiddenFromScreenReader = _interopRequireDefault(require("../util/isHiddenFromScreenReader"));

<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _jsxAstUtils = require("jsx-ast-utils");
var _arrayIncludes = _interopRequireDefault(require("array-includes"));
var _stringPrototype = _interopRequireDefault(require("string.prototype.includes"));
var _safeRegexTest = _interopRequireDefault(require("safe-regex-test"));
var _schemas = require("../util/schemas");
var _getElementType = _interopRequireDefault(require("../util/getElementType"));
var _isHiddenFromScreenReader = _interopRequireDefault(require("../util/isHiddenFromScreenReader"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
/**
 * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.
 * @author Ethan Cohen
 */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

=======
// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------
=======
=======
>>>>>>> 6be43a322 (figuring out lint)

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
var REDUNDANT_WORDS = ['image', 'photo', 'picture'];
var errorMessage = 'Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.';
var schema = (0, _schemas.generateObjSchema)({
  components: _schemas.arraySchema,
  words: _schemas.arraySchema
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var isASCII = (0, _safeRegexTest["default"])(/[\x20-\x7F]+/);
function containsRedundantWord(value, redundantWords) {
  var lowercaseRedundantWords = redundantWords.map(function (redundantWord) {
    return redundantWord.toLowerCase();
  });
  if (isASCII(value)) {
    return value.split(/\s+/).some(function (valueWord) {
      return (0, _arrayIncludes["default"])(lowercaseRedundantWords, valueWord.toLowerCase());
    });
  }
  return lowercaseRedundantWords.some(function (redundantWord) {
    return (0, _stringPrototype["default"])(value.toLowerCase(), redundantWord);
  });
}
var _default = exports["default"] = {
  meta: {
    docs: {
      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md',
      description: 'Enforce `<img>` alt prop does not contain the word "image", "picture", or "photo".'
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
module.exports = {
  meta: {
    docs: {
      url: 'https://github.com/evcohen/eslint-plugin-jsx-a11y/tree/master/docs/rules/img-redundant-alt.md'
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
var isASCII = (0, _safeRegexTest["default"])(/[\x20-\x7F]+/);
function containsRedundantWord(value, redundantWords) {
  var lowercaseRedundantWords = redundantWords.map(function (redundantWord) {
    return redundantWord.toLowerCase();
  });
  if (isASCII(value)) {
    return value.split(/\s+/).some(function (valueWord) {
      return (0, _arrayIncludes["default"])(lowercaseRedundantWords, valueWord.toLowerCase());
    });
  }
  return lowercaseRedundantWords.some(function (redundantWord) {
    return (0, _stringPrototype["default"])(value.toLowerCase(), redundantWord);
  });
}
var _default = exports["default"] = {
  meta: {
    docs: {
      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md',
      description: 'Enforce `<img>` alt prop does not contain the word "image", "picture", or "photo".'
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    },
    schema: [schema]
  },
  create: function create(context) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    var elementType = (0, _getElementType["default"])(context);
=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
    var elementType = (0, _getElementType["default"])(context);
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
=======
    var elementType = (0, _getElementType["default"])(context);
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        var options = context.options[0] || {};
        var componentOptions = options.components || [];
        var typesToValidate = ['img'].concat(componentOptions);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        var nodeType = elementType(node);

        // Only check 'label' elements and custom types.
        if (typesToValidate.indexOf(nodeType) === -1) {
          return;
        }
        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');
        // Return if alt prop is not present.
        if (altProp === undefined) {
          return;
        }
        var value = (0, _jsxAstUtils.getLiteralPropValue)(altProp);
        var isVisible = (0, _isHiddenFromScreenReader["default"])(nodeType, node.attributes) === false;
        var _options$words = options.words,
          words = _options$words === void 0 ? [] : _options$words;
        var redundantWords = REDUNDANT_WORDS.concat(words);
        if (typeof value === 'string' && isVisible) {
          var hasRedundancy = containsRedundantWord(value, redundantWords);
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
        var nodeType = (0, _jsxAstUtils.elementType)(node); // Only check 'label' elements and custom types.

        if (typesToValidate.indexOf(nodeType) === -1) {
          return;
        }

        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt'); // Return if alt prop is not present.

        if (altProp === undefined) {
          return;
        }

        var value = (0, _jsxAstUtils.getLiteralPropValue)(altProp);
        var isVisible = (0, _isHiddenFromScreenReader["default"])(nodeType, node.attributes) === false;
        var _options$words = options.words,
            words = _options$words === void 0 ? [] : _options$words;
        var redundantWords = REDUNDANT_WORDS.concat(words);

        if (typeof value === 'string' && isVisible) {
          var hasRedundancy = redundantWords.some(function (word) {
            return Boolean(value.match(new RegExp("(?!{)\\b".concat(word, "\\b(?!})"), 'i')));
          });

<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
        var nodeType = elementType(node);

        // Only check 'label' elements and custom types.
        if (typesToValidate.indexOf(nodeType) === -1) {
          return;
        }
        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');
        // Return if alt prop is not present.
        if (altProp === undefined) {
          return;
        }
        var value = (0, _jsxAstUtils.getLiteralPropValue)(altProp);
        var isVisible = (0, _isHiddenFromScreenReader["default"])(nodeType, node.attributes) === false;
        var _options$words = options.words,
          words = _options$words === void 0 ? [] : _options$words;
        var redundantWords = REDUNDANT_WORDS.concat(words);
        if (typeof value === 'string' && isVisible) {
          var hasRedundancy = containsRedundantWord(value, redundantWords);
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
          if (hasRedundancy === true) {
            context.report({
              node,
              message: errorMessage
            });
          }
        }
      }
    };
  }
<<<<<<< HEAD
<<<<<<< HEAD
};
<<<<<<< HEAD
module.exports = exports.default;
=======
};
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
};
module.exports = exports.default;
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
};
module.exports = exports.default;
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
