<<<<<<< HEAD
<<<<<<< HEAD
=======
/* eslint-env jest */
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
/* eslint-env jest */
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
/**
 * @fileoverview Enforce that elements that do not support ARIA roles,
 *  states and properties do not have those attributes.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

import { dom } from 'aria-query';
import { RuleTester } from 'eslint';
import parserOptionsMapper from '../../__util__/parserOptionsMapper';
<<<<<<< HEAD
<<<<<<< HEAD
import parsers from '../../__util__/helpers/parsers';
=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
import parsers from '../../__util__/helpers/parsers';
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
import rule from '../../../src/rules/aria-unsupported-elements';

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

const ruleTester = new RuleTester();

<<<<<<< HEAD
<<<<<<< HEAD
const errorMessage = (invalidProp) => ({
=======
const errorMessage = invalidProp => ({
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
const errorMessage = invalidProp => ({
=======
const errorMessage = (invalidProp) => ({
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
  message: `This element does not support ARIA roles, states and properties. \
Try removing the prop '${invalidProp}'.`,
  type: 'JSXOpeningElement',
});

<<<<<<< HEAD
<<<<<<< HEAD
const domElements = dom.keys();
=======
const domElements = [...dom.keys()];
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
const domElements = [...dom.keys()];
=======
const domElements = dom.keys();
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
// Generate valid test cases
const roleValidityTests = domElements.map((element) => {
  const isReserved = dom.get(element).reserved || false;
  const role = isReserved ? '' : 'role';

  return {
    code: `<${element} ${role} />`,
  };
});

const ariaValidityTests = domElements.map((element) => {
  const isReserved = dom.get(element).reserved || false;
  const aria = isReserved ? '' : 'aria-hidden';

  return {
    code: `<${element} ${aria} />`,
  };
}).concat({
  code: '<fake aria-hidden />',
  errors: [errorMessage('aria-hidden')],
});

// Generate invalid test cases.
const invalidRoleValidityTests = domElements
<<<<<<< HEAD
<<<<<<< HEAD
  .filter((element) => dom.get(element).reserved)
  .map((reservedElem) => ({
    code: `<${reservedElem} role {...props} />`,
    errors: [errorMessage('role')],
  })).concat({
    code: '<Meta aria-hidden />',
    errors: [errorMessage('aria-hidden')],
    settings: { 'jsx-a11y': { components: { Meta: 'meta' } } },
  });

const invalidAriaValidityTests = domElements
  .filter((element) => dom.get(element).reserved)
  .map((reservedElem) => ({
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
  .filter(element => Boolean(dom.get(element).reserved))
  .map(reservedElem => ({
    code: `<${reservedElem} role {...props} />`,
    errors: [errorMessage('role')],
  }));

const invalidAriaValidityTests = domElements
  .filter(element => Boolean(dom.get(element).reserved))
  .map(reservedElem => ({
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
  .filter((element) => dom.get(element).reserved)
  .map((reservedElem) => ({
    code: `<${reservedElem} role {...props} />`,
    errors: [errorMessage('role')],
  })).concat({
    code: '<Meta aria-hidden />',
    errors: [errorMessage('aria-hidden')],
    settings: { 'jsx-a11y': { components: { Meta: 'meta' } } },
  });

const invalidAriaValidityTests = domElements
  .filter((element) => dom.get(element).reserved)
  .map((reservedElem) => ({
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    code: `<${reservedElem} aria-hidden aria-role="none" {...props} />`,
    errors: [errorMessage('aria-hidden')],
  }));

ruleTester.run('aria-unsupported-elements', rule, {
<<<<<<< HEAD
<<<<<<< HEAD
  valid: parsers.all([].concat(roleValidityTests, ariaValidityTests)).map(parserOptionsMapper),
  invalid: parsers.all([].concat(invalidRoleValidityTests, invalidAriaValidityTests))
=======
  valid: roleValidityTests.concat(ariaValidityTests).map(parserOptionsMapper),
  invalid: invalidRoleValidityTests.concat(invalidAriaValidityTests)
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
  valid: roleValidityTests.concat(ariaValidityTests).map(parserOptionsMapper),
  invalid: invalidRoleValidityTests.concat(invalidAriaValidityTests)
=======
  valid: parsers.all([].concat(roleValidityTests, ariaValidityTests)).map(parserOptionsMapper),
  invalid: parsers.all([].concat(invalidRoleValidityTests, invalidAriaValidityTests))
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    .map(parserOptionsMapper),
});
