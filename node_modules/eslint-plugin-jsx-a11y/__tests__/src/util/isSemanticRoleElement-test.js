<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
import test from 'tape';

import isSemanticRoleElement from '../../../src/util/isSemanticRoleElement';
import JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';

test('isSemanticRoleElement', (t) => {
  t.equal(
    isSemanticRoleElement('input', [
      JSXAttributeMock('type', 'checkbox'),
      JSXAttributeMock('role', 'switch'),
    ]),
    true,
    'identifies semantic role elements',
  );

  t.test('rejects non-semantics role elements', (st) => {
    st.equal(
      isSemanticRoleElement('input', [
        JSXAttributeMock('type', 'radio'),
        JSXAttributeMock('role', 'switch'),
      ]),
      false,
    );

    st.equal(
      isSemanticRoleElement('input', [
        JSXAttributeMock('type', 'text'),
        JSXAttributeMock('role', 'combobox'),
      ]),
      false,
    );

    st.equal(
      isSemanticRoleElement('button', [
        JSXAttributeMock('role', 'switch'),
        JSXAttributeMock('aria-pressed', 'true'),
      ]),
      false,
    );

    st.equal(
      isSemanticRoleElement('input', [
        JSXAttributeMock('role', 'switch'),
      ]),
      false,
    );

    st.end();
  });

  t.doesNotThrow(
    () => {
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
=======
>>>>>>> bda8256cb (figuring out lint)
/* eslint-env mocha */
import expect from 'expect';
import isSemanticRoleElement from '../../../src/util/isSemanticRoleElement';
import JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';

describe('isSemanticRoleElement', () => {
  it('should identify semantic role elements', () => {
    expect(isSemanticRoleElement('input', [
      JSXAttributeMock('type', 'checkbox'),
      JSXAttributeMock('role', 'switch'),
    ])).toBe(true);
  });
  it('should reject non-semantic role elements', () => {
    expect(isSemanticRoleElement('input', [
      JSXAttributeMock('type', 'radio'),
      JSXAttributeMock('role', 'switch'),
    ])).toBe(false);
    expect(isSemanticRoleElement('input', [
      JSXAttributeMock('type', 'text'),
      JSXAttributeMock('role', 'combobox'),
    ])).toBe(false);
    expect(isSemanticRoleElement('button', [
      JSXAttributeMock('role', 'switch'),
      JSXAttributeMock('aria-pressed', 'true'),
    ])).toBe(false);
    expect(isSemanticRoleElement('input', [
      JSXAttributeMock('role', 'switch'),
    ])).toBe(false);
  });
  it('should not throw on JSXSpreadAttribute', () => {
    expect(() => {
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 5209f27ef (figuring out lint)
import test from 'tape';

import isSemanticRoleElement from '../../../src/util/isSemanticRoleElement';
import JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';

test('isSemanticRoleElement', (t) => {
  t.equal(
    isSemanticRoleElement('input', [
      JSXAttributeMock('type', 'checkbox'),
      JSXAttributeMock('role', 'switch'),
    ]),
    true,
    'identifies semantic role elements',
  );

  t.test('rejects non-semantics role elements', (st) => {
    st.equal(
      isSemanticRoleElement('input', [
        JSXAttributeMock('type', 'radio'),
        JSXAttributeMock('role', 'switch'),
      ]),
      false,
    );

    st.equal(
      isSemanticRoleElement('input', [
        JSXAttributeMock('type', 'text'),
        JSXAttributeMock('role', 'combobox'),
      ]),
      false,
    );

    st.equal(
      isSemanticRoleElement('button', [
        JSXAttributeMock('role', 'switch'),
        JSXAttributeMock('aria-pressed', 'true'),
      ]),
      false,
    );

    st.equal(
      isSemanticRoleElement('input', [
        JSXAttributeMock('role', 'switch'),
      ]),
      false,
    );

    st.end();
  });

  t.doesNotThrow(
    () => {
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
/* eslint-env mocha */
import expect from 'expect';
import isSemanticRoleElement from '../../../src/util/isSemanticRoleElement';
import JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';

describe('isSemanticRoleElement', () => {
  it('should identify semantic role elements', () => {
    expect(isSemanticRoleElement('input', [
      JSXAttributeMock('type', 'checkbox'),
      JSXAttributeMock('role', 'switch'),
    ])).toBe(true);
  });
  it('should reject non-semantic role elements', () => {
    expect(isSemanticRoleElement('input', [
      JSXAttributeMock('type', 'radio'),
      JSXAttributeMock('role', 'switch'),
    ])).toBe(false);
    expect(isSemanticRoleElement('input', [
      JSXAttributeMock('type', 'text'),
      JSXAttributeMock('role', 'combobox'),
    ])).toBe(false);
    expect(isSemanticRoleElement('button', [
      JSXAttributeMock('role', 'switch'),
      JSXAttributeMock('aria-pressed', 'true'),
    ])).toBe(false);
    expect(isSemanticRoleElement('input', [
      JSXAttributeMock('role', 'switch'),
    ])).toBe(false);
  });
  it('should not throw on JSXSpreadAttribute', () => {
    expect(() => {
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
import test from 'tape';

import isSemanticRoleElement from '../../../src/util/isSemanticRoleElement';
import JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';

test('isSemanticRoleElement', (t) => {
  t.equal(
    isSemanticRoleElement('input', [
      JSXAttributeMock('type', 'checkbox'),
      JSXAttributeMock('role', 'switch'),
    ]),
    true,
    'identifies semantic role elements',
  );

  t.test('rejects non-semantics role elements', (st) => {
    st.equal(
      isSemanticRoleElement('input', [
        JSXAttributeMock('type', 'radio'),
        JSXAttributeMock('role', 'switch'),
      ]),
      false,
    );

    st.equal(
      isSemanticRoleElement('input', [
        JSXAttributeMock('type', 'text'),
        JSXAttributeMock('role', 'combobox'),
      ]),
      false,
    );

    st.equal(
      isSemanticRoleElement('button', [
        JSXAttributeMock('role', 'switch'),
        JSXAttributeMock('aria-pressed', 'true'),
      ]),
      false,
    );

    st.equal(
      isSemanticRoleElement('input', [
        JSXAttributeMock('role', 'switch'),
      ]),
      false,
    );

    st.end();
  });

  t.doesNotThrow(
    () => {
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
>>>>>>> 5209f27ef (figuring out lint)
>>>>>>> bda8256cb (figuring out lint)
      isSemanticRoleElement('input', [
        JSXAttributeMock('type', 'checkbox'),
        JSXAttributeMock('role', 'checkbox'),
        JSXAttributeMock('aria-checked', 'false'),
        JSXAttributeMock('aria-labelledby', 'foo'),
        JSXAttributeMock('tabindex', '0'),
        {
          type: 'JSXSpreadAttribute',
          argument: {
            type: 'Identifier',
            name: 'props',
          },
        },
      ]);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    },
    'does not throw on JSXSpreadAttribute',
  );

  t.end();
=======
    }).not.toThrow();
  });
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
=======
>>>>>>> bda8256cb (figuring out lint)
    }).not.toThrow();
  });
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 5209f27ef (figuring out lint)
    },
    'does not throw on JSXSpreadAttribute',
  );

  t.end();
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
    }).not.toThrow();
  });
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
    }).not.toThrow();
  });
=======
    },
    'does not throw on JSXSpreadAttribute',
  );

  t.end();
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
>>>>>>> 5209f27ef (figuring out lint)
>>>>>>> bda8256cb (figuring out lint)
});
