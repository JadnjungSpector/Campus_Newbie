<<<<<<< HEAD
<<<<<<< HEAD
import test from 'tape';

import { generateObjSchema, arraySchema, enumArraySchema } from '../../../src/util/schemas';

test('schemas', (t) => {
  t.test('should generate an object schema with correct properties', (st) => {
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
/* eslint-env jest */
import assert from 'assert';
import { generateObjSchema, arraySchema, enumArraySchema } from '../../../src/util/schemas';

describe('schemas', () => {
  it('should generate an object schema with correct properties', () => {
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
import test from 'tape';

import { generateObjSchema, arraySchema, enumArraySchema } from '../../../src/util/schemas';

test('schemas', (t) => {
  t.test('should generate an object schema with correct properties', (st) => {
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    const schema = generateObjSchema({
      foo: 'bar',
      baz: arraySchema,
    });
    const properties = schema.properties || {};

<<<<<<< HEAD
<<<<<<< HEAD
    st.deepEqual(properties.foo, properties.foo, 'bar');
    st.deepEqual(properties.baz.type, 'array');

    st.end();
  });

  t.deepEqual(
    enumArraySchema(),
    {
      additionalItems: false,
      items: {
        enum: [],
        type: 'string',
      },
      minItems: 0,
      type: 'array',
      uniqueItems: true,
    },
    'enumArraySchema works with no arguments',
  );

  t.end();
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
    assert.deepEqual(properties.foo, 'bar');
    assert.deepEqual(properties.baz.type, 'array');
  });
  describe('enumArraySchema', () => {
    it('works with no arguments', () => {
      assert.deepEqual(enumArraySchema(), {
        additionalItems: false,
        items: {
          enum: [],
          type: 'string',
        },
        minItems: 0,
        type: 'array',
        uniqueItems: true,
      });
    });
  });
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
    st.deepEqual(properties.foo, properties.foo, 'bar');
    st.deepEqual(properties.baz.type, 'array');

    st.end();
  });

  t.deepEqual(
    enumArraySchema(),
    {
      additionalItems: false,
      items: {
        enum: [],
        type: 'string',
      },
      minItems: 0,
      type: 'array',
      uniqueItems: true,
    },
    'enumArraySchema works with no arguments',
  );

  t.end();
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
});
