<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
import test from 'tape';
import { elementType } from 'jsx-ast-utils';

=======
/* eslint-env mocha */
import expect from 'expect';
import { elementType } from 'jsx-ast-utils';
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
=======
>>>>>>> bda8256cb (figuring out lint)
/* eslint-env mocha */
import expect from 'expect';
import { elementType } from 'jsx-ast-utils';
=======
import test from 'tape';
import { elementType } from 'jsx-ast-utils';

<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
=======
/* eslint-env mocha */
import expect from 'expect';
import { elementType } from 'jsx-ast-utils';
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
/* eslint-env mocha */
import expect from 'expect';
import { elementType } from 'jsx-ast-utils';
>>>>>>> 5209f27ef (figuring out lint)
>>>>>>> bda8256cb (figuring out lint)
=======
import test from 'tape';
import { elementType } from 'jsx-ast-utils';

>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> ee12506f5 (figuring out lint)
=======
<<<<<<< HEAD
=======
import test from 'tape';
import { elementType } from 'jsx-ast-utils';

>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 84b8e337c (figuring out lint)
>>>>>>> 5209f27ef (figuring out lint)
>>>>>>> bda8256cb (figuring out lint)
import isAbstractRole from '../../../src/util/isAbstractRole';
import {
  genElementSymbol,
  genAbstractRoleElements,
  genNonAbstractRoleElements,
} from '../../../__mocks__/genInteractives';

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
test('isAbstractRole', (t) => {
  t.equal(
    isAbstractRole(undefined, []),
    false,
    'does NOT identify JSX Components (no tagName) as abstract role elements',
  );

  t.test('elements with an abstract role', (st) => {
    genAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      st.equal(
        isAbstractRole(
          elementType(openingElement),
          attributes,
        ),
        true,
        `identifies \`${genElementSymbol(openingElement)}\` as an abstract role element`,
      );
    });

    st.end();
  });

  t.test('elements with a non-abstract role', (st) => {
    genNonAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      st.equal(
        isAbstractRole(
          elementType(openingElement),
          attributes,
        ),
        false,
        `does NOT identify \`${genElementSymbol(openingElement)}\` as an abstract role element`,
      );
    });

    st.end();
  });

  t.end();
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
=======
>>>>>>> bda8256cb (figuring out lint)
describe('isAbstractRole', () => {
  describe('JSX Components (no tagName)', () => {
    it('should NOT identify them as abstract role elements', () => {
      expect(isAbstractRole(undefined, []))
        .toBe(false);
    });
  });
  describe('elements with an abstract role', () => {
    genAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      it(`should identify \`${genElementSymbol(openingElement)}\` as an abstract role element`, () => {
        expect(isAbstractRole(
          elementType(openingElement),
          attributes,
        )).toBe(true);
      });
    });
  });
  describe('elements with a non-abstract role', () => {
    genNonAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      it(`should NOT identify \`${genElementSymbol(openingElement)}\` as an abstract role element`, () => {
        expect(isAbstractRole(
          elementType(openingElement),
          attributes,
        )).toBe(false);
      });
    });
  });
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 5209f27ef (figuring out lint)
test('isAbstractRole', (t) => {
  t.equal(
    isAbstractRole(undefined, []),
    false,
    'does NOT identify JSX Components (no tagName) as abstract role elements',
  );

  t.test('elements with an abstract role', (st) => {
    genAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      st.equal(
        isAbstractRole(
          elementType(openingElement),
          attributes,
        ),
        true,
        `identifies \`${genElementSymbol(openingElement)}\` as an abstract role element`,
      );
    });

    st.end();
  });

  t.test('elements with a non-abstract role', (st) => {
    genNonAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      st.equal(
        isAbstractRole(
          elementType(openingElement),
          attributes,
        ),
        false,
        `does NOT identify \`${genElementSymbol(openingElement)}\` as an abstract role element`,
      );
    });

    st.end();
  });

  t.end();
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
describe('isAbstractRole', () => {
  describe('JSX Components (no tagName)', () => {
    it('should NOT identify them as abstract role elements', () => {
      expect(isAbstractRole(undefined, []))
        .toBe(false);
    });
  });
  describe('elements with an abstract role', () => {
    genAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      it(`should identify \`${genElementSymbol(openingElement)}\` as an abstract role element`, () => {
        expect(isAbstractRole(
          elementType(openingElement),
          attributes,
        )).toBe(true);
      });
    });
  });
  describe('elements with a non-abstract role', () => {
    genNonAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      it(`should NOT identify \`${genElementSymbol(openingElement)}\` as an abstract role element`, () => {
        expect(isAbstractRole(
          elementType(openingElement),
          attributes,
        )).toBe(false);
      });
    });
  });
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
test('isAbstractRole', (t) => {
  t.equal(
    isAbstractRole(undefined, []),
    false,
    'does NOT identify JSX Components (no tagName) as abstract role elements',
  );

  t.test('elements with an abstract role', (st) => {
    genAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      st.equal(
        isAbstractRole(
          elementType(openingElement),
          attributes,
        ),
        true,
        `identifies \`${genElementSymbol(openingElement)}\` as an abstract role element`,
      );
    });

    st.end();
  });

  t.test('elements with a non-abstract role', (st) => {
    genNonAbstractRoleElements().forEach(({ openingElement }) => {
      const { attributes } = openingElement;
      st.equal(
        isAbstractRole(
          elementType(openingElement),
          attributes,
        ),
        false,
        `does NOT identify \`${genElementSymbol(openingElement)}\` as an abstract role element`,
      );
    });

    st.end();
  });

  t.end();
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
>>>>>>> 5209f27ef (figuring out lint)
>>>>>>> bda8256cb (figuring out lint)
});
