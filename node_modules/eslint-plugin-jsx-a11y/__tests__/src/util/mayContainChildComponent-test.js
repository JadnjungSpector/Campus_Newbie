<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
import test from 'tape';

=======
/* eslint-env jest */
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
/* eslint-env jest */
=======
import test from 'tape';

>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
import test from 'tape';

>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
import mayContainChildComponent from '../../../src/util/mayContainChildComponent';
import JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';
import JSXElementMock from '../../../__mocks__/JSXElementMock';
import JSXExpressionContainerMock from '../../../__mocks__/JSXExpressionContainerMock';

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
test('mayContainChildComponent', (t) => {
  t.equal(
    mayContainChildComponent(
      JSXElementMock('div', [], [
        JSXElementMock('div', [], [
          JSXElementMock('span', [], []),
          JSXElementMock('span', [], [
            JSXElementMock('span', [], []),
            JSXElementMock('span', [], [
              JSXElementMock('span', [], []),
            ]),
          ]),
        ]),
        JSXElementMock('span', [], []),
        JSXElementMock('img', [
          JSXAttributeMock('src', 'some/path'),
        ]),
      ]),
      'FancyComponent',
      5,
    ),
    false,
    'no FancyComponent returns false',
  );

  t.test('contains an indicated component', (st) => {
    st.equal(
      mayContainChildComponent(
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
describe('mayContainChildComponent', () => {
  describe('no FancyComponent', () => {
    it('should return false', () => {
      expect(mayContainChildComponent(
        JSXElementMock('div', [], [
          JSXElementMock('div', [], [
            JSXElementMock('span', [], []),
            JSXElementMock('span', [], [
              JSXElementMock('span', [], []),
              JSXElementMock('span', [], [
                JSXElementMock('span', [], []),
              ]),
            ]),
          ]),
          JSXElementMock('span', [], []),
          JSXElementMock('img', [
            JSXAttributeMock('src', 'some/path'),
          ]),
        ]),
        'FancyComponent',
        5,
      )).toBe(false);
    });
  });
  describe('contains an indicated component', () => {
    it('should return true', () => {
      expect(mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
test('mayContainChildComponent', (t) => {
  t.equal(
    mayContainChildComponent(
      JSXElementMock('div', [], [
        JSXElementMock('div', [], [
          JSXElementMock('span', [], []),
          JSXElementMock('span', [], [
            JSXElementMock('span', [], []),
            JSXElementMock('span', [], [
              JSXElementMock('span', [], []),
            ]),
          ]),
        ]),
        JSXElementMock('span', [], []),
        JSXElementMock('img', [
          JSXAttributeMock('src', 'some/path'),
        ]),
      ]),
      'FancyComponent',
      5,
    ),
    false,
    'no FancyComponent returns false',
  );

  t.test('contains an indicated component', (st) => {
    st.equal(
      mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        JSXElementMock('div', [], [
          JSXElementMock('input'),
        ]),
        'input',
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      ),
      true,
      'returns true',
    );

    st.equal(
      mayContainChildComponent(
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
      )).toBe(true);
    });
    it('should return true', () => {
      expect(mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
      ),
      true,
      'returns true',
    );

    st.equal(
      mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        JSXElementMock('div', [], [
          JSXElementMock('FancyComponent'),
        ]),
        'FancyComponent',
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      ),
      true,
      'returns true',
    );

    st.equal(
      mayContainChildComponent(
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
      )).toBe(true);
    });
    it('FancyComponent is outside of default depth, should return false', () => {
      expect(mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
      ),
      true,
      'returns true',
    );

    st.equal(
      mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        JSXElementMock('div', [], [
          JSXElementMock('div', [], [
            JSXElementMock('FancyComponent'),
          ]),
        ]),
        'FancyComponent',
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      ),
      false,
      'FancyComponent is outside of default depth, should return false',
    );

    st.equal(
      mayContainChildComponent(
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
      )).toBe(false);
    });
    it('FancyComponent is inside of custom depth, should return true', () => {
      expect(mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
      ),
      false,
      'FancyComponent is outside of default depth, should return false',
    );

    st.equal(
      mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        JSXElementMock('div', [], [
          JSXElementMock('div', [], [
            JSXElementMock('FancyComponent'),
          ]),
        ]),
        'FancyComponent',
        2,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      ),
      true,
      'FancyComponent is inside of custom depth, should return true',
    );

    st.equal(
      mayContainChildComponent(
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
      )).toBe(true);
    });
    it('deep nesting, should return true', () => {
      expect(mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
      ),
      true,
      'FancyComponent is inside of custom depth, should return true',
    );

    st.equal(
      mayContainChildComponent(
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        JSXElementMock('div', [], [
          JSXElementMock('div', [], [
            JSXElementMock('span', [], []),
            JSXElementMock('span', [], [
              JSXElementMock('span', [], []),
              JSXElementMock('span', [], [
                JSXElementMock('span', [], [
                  JSXElementMock('span', [], [
                    JSXElementMock('FancyComponent'),
                  ]),
                ]),
              ]),
            ]),
          ]),
          JSXElementMock('span', [], []),
          JSXElementMock('img', [
            JSXAttributeMock('src', 'some/path'),
          ]),
        ]),
        'FancyComponent',
        6,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      ),
      true,
      'deep nesting, returns true',
    );

    st.end();
  });

  t.equal(
    mayContainChildComponent(
      JSXElementMock('div', [], [
        JSXExpressionContainerMock('mysteryBox'),
      ]),
      'FancyComponent',
    ),
    true,
    'Intederminate situations + expression container children - returns true',
  );

  t.test('Glob name matching - component name contains question mark ? - match any single character', (st) => {
    st.equal(
      mayContainChildComponent(
        JSXElementMock('div', [], [
          JSXElementMock('FancyComponent'),
        ]),
        'Fanc?Co??onent',
      ),
      true,
      'returns true',
    );

    st.equal(
      mayContainChildComponent(
        JSXElementMock('div', [], [
          JSXElementMock('FancyComponent'),
        ]),
        'FancyComponent?',
      ),
      false,
      'returns false',
    );

    st.test('component name contains asterisk * - match zero or more characters', (s2t) => {
      s2t.equal(
        mayContainChildComponent(
          JSXElementMock('div', [], [
            JSXElementMock('FancyComponent'),
          ]),
          'Fancy*',
        ),
        true,
        'returns true',
      );

      s2t.equal(
        mayContainChildComponent(
          JSXElementMock('div', [], [
            JSXElementMock('FancyComponent'),
          ]),
          '*Component',
        ),
        true,
        'returns true',
      );

      s2t.equal(
        mayContainChildComponent(
          JSXElementMock('div', [], [
            JSXElementMock('FancyComponent'),
          ]),
          'Fancy*C*t',
        ),
        true,
        'returns true',
      );

      s2t.end();
    });

    st.end();
  });

  t.test('using a custom elementType function', (st) => {
    st.equal(
      mayContainChildComponent(
        JSXElementMock('div', [], [
          JSXElementMock('CustomInput'),
        ]),
        'input',
        2,
        () => 'input',
      ),
      true,
      'returns true when the custom elementType returns the proper name',
    );

    st.equal(
      mayContainChildComponent(
        JSXElementMock('div', [], [
          JSXElementMock('CustomInput'),
        ]),
        'input',
        2,
        () => 'button',
      ),
      false,
      'returns false when the custom elementType returns a wrong name',
    );

    st.end();
  });

  t.end();
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
      )).toBe(true);
    });
  });
  describe('Intederminate situations', () => {
    describe('expression container children', () => {
      it('should return true', () => {
        expect(mayContainChildComponent(
          JSXElementMock('div', [], [
            JSXExpressionContainerMock('mysteryBox'),
          ]),
          'FancyComponent',
        )).toBe(true);
      });
    });
  });
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
      ),
      true,
      'deep nesting, returns true',
    );

    st.end();
  });

  t.equal(
    mayContainChildComponent(
      JSXElementMock('div', [], [
        JSXExpressionContainerMock('mysteryBox'),
      ]),
      'FancyComponent',
    ),
    true,
    'Intederminate situations + expression container children - returns true',
  );

  t.test('Glob name matching - component name contains question mark ? - match any single character', (st) => {
    st.equal(
      mayContainChildComponent(
        JSXElementMock('div', [], [
          JSXElementMock('FancyComponent'),
        ]),
        'Fanc?Co??onent',
      ),
      true,
      'returns true',
    );

    st.equal(
      mayContainChildComponent(
        JSXElementMock('div', [], [
          JSXElementMock('FancyComponent'),
        ]),
        'FancyComponent?',
      ),
      false,
      'returns false',
    );

    st.test('component name contains asterisk * - match zero or more characters', (s2t) => {
      s2t.equal(
        mayContainChildComponent(
          JSXElementMock('div', [], [
            JSXElementMock('FancyComponent'),
          ]),
          'Fancy*',
        ),
        true,
        'returns true',
      );

      s2t.equal(
        mayContainChildComponent(
          JSXElementMock('div', [], [
            JSXElementMock('FancyComponent'),
          ]),
          '*Component',
        ),
        true,
        'returns true',
      );

      s2t.equal(
        mayContainChildComponent(
          JSXElementMock('div', [], [
            JSXElementMock('FancyComponent'),
          ]),
          'Fancy*C*t',
        ),
        true,
        'returns true',
      );

      s2t.end();
    });

    st.end();
  });

  t.test('using a custom elementType function', (st) => {
    st.equal(
      mayContainChildComponent(
        JSXElementMock('div', [], [
          JSXElementMock('CustomInput'),
        ]),
        'input',
        2,
        () => 'input',
      ),
      true,
      'returns true when the custom elementType returns the proper name',
    );

    st.equal(
      mayContainChildComponent(
        JSXElementMock('div', [], [
          JSXElementMock('CustomInput'),
        ]),
        'input',
        2,
        () => 'button',
      ),
      false,
      'returns false when the custom elementType returns a wrong name',
    );

    st.end();
  });

  t.end();
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
});
