<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> bda8256cb (figuring out lint)
import test from 'tape';

import getSuggestion from '../../../src/util/getSuggestion';

test('spell check suggestion API', (t) => {
  t.deepEqual([], getSuggestion('foo'), 'returns no suggestions given empty word and no dictionary');

  t.deepEqual(
    getSuggestion('foo'),
    [],
    'returns no suggestions given real word and no dictionary',
  );

  t.deepEqual(
    getSuggestion('fo', ['foo', 'bar', 'baz']),
    ['foo'],
    'returns correct suggestion given real word and a dictionary',
  );

  t.deepEqual(
    getSuggestion('theer', ['there', 'their', 'foo', 'bar']),
    ['there', 'their'],
    'returns multiple correct suggestions given real word and a dictionary',
  );

  t.deepEqual(
    getSuggestion('theer', ['there', 'their', 'foo', 'bar'], 1),
    ['there'],
    'returns correct # of suggestions given the limit argument',
  );

  t.end();
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
<<<<<<< HEAD
=======
>>>>>>> ee12506f5 (figuring out lint)
=======
>>>>>>> 5209f27ef (figuring out lint)
>>>>>>> bda8256cb (figuring out lint)
/* eslint-env jest */
import assert from 'assert';
import getSuggestion from '../../../src/util/getSuggestion';

describe('spell check suggestion API', () => {
  it('should return no suggestions given empty word and no dictionary', () => {
    const word = '';
    const expected = [];
    const actual = getSuggestion(word);

    assert.deepEqual(expected, actual);
  });

  it('should return no suggestions given real word and no dictionary', () => {
    const word = 'foo';
    const expected = [];
    const actual = getSuggestion(word);

    assert.deepEqual(expected, actual);
  });

  it('should return correct suggestion given real word and a dictionary', () => {
    const word = 'fo';
    const dictionary = ['foo', 'bar', 'baz'];
    const expected = ['foo'];
    const actual = getSuggestion(word, dictionary);

    assert.deepEqual(expected, actual);
  });

  it('should return multiple correct suggestions given real word and a dictionary', () => {
    const word = 'theer';
    const dictionary = ['there', 'their', 'foo', 'bar'];
    const expected = ['there', 'their'];
    const actual = getSuggestion(word, dictionary);

    assert.deepEqual(expected, actual);
  });

  it('should return correct # of suggestions given the limit argument', () => {
    const word = 'theer';
    const dictionary = ['there', 'their', 'foo', 'bar'];
    const limit = 1;
    const expected = 1;
    const actual = getSuggestion(word, dictionary, limit).length;

    assert.deepEqual(expected, actual);
  });
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> bda8256cb (figuring out lint)
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
=======
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> 5209f27ef (figuring out lint)
import test from 'tape';

import getSuggestion from '../../../src/util/getSuggestion';

test('spell check suggestion API', (t) => {
  t.deepEqual([], getSuggestion('foo'), 'returns no suggestions given empty word and no dictionary');

  t.deepEqual(
    getSuggestion('foo'),
    [],
    'returns no suggestions given real word and no dictionary',
  );

  t.deepEqual(
    getSuggestion('fo', ['foo', 'bar', 'baz']),
    ['foo'],
    'returns correct suggestion given real word and a dictionary',
  );

  t.deepEqual(
    getSuggestion('theer', ['there', 'their', 'foo', 'bar']),
    ['there', 'their'],
    'returns multiple correct suggestions given real word and a dictionary',
  );

  t.deepEqual(
    getSuggestion('theer', ['there', 'their', 'foo', 'bar'], 1),
    ['there'],
    'returns correct # of suggestions given the limit argument',
  );

  t.end();
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
>>>>>>> 5209f27ef (figuring out lint)
>>>>>>> bda8256cb (figuring out lint)
});
