/**
 * @fileoverview Prevent multiple component definition per file
 * @author Yannick Croissant
 */

'use strict';

<<<<<<< HEAD
<<<<<<< HEAD
const values = require('object.values');

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');
const report = require('../util/report');
=======
const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');
=======
const values = require('object.values');

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');
const report = require('../util/report');
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

<<<<<<< HEAD
<<<<<<< HEAD
const messages = {
  onlyOneComponent: 'Declare only one React component per file',
};

/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  meta: {
    docs: {
      description: 'Disallow multiple component definition per file',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('no-multi-comp'),
    },

    messages,

=======
=======
>>>>>>> 84b8e337c (figuring out lint)
module.exports = {
  meta: {
    docs: {
      description: 'Prevent multiple component definition per file',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('no-multi-comp')
    },

<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
const messages = {
  onlyOneComponent: 'Declare only one React component per file',
};

/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  meta: {
    docs: {
      description: 'Disallow multiple component definition per file',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('no-multi-comp'),
    },

    messages,

>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    schema: [{
      type: 'object',
      properties: {
        ignoreStateless: {
          default: false,
<<<<<<< HEAD
<<<<<<< HEAD
          type: 'boolean',
        },
      },
      additionalProperties: false,
    }],
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
          type: 'boolean'
        }
      },
      additionalProperties: false
    }]
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
          type: 'boolean',
        },
      },
      additionalProperties: false,
    }],
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
  },

  create: Components.detect((context, components, utils) => {
    const configuration = context.options[0] || {};
    const ignoreStateless = configuration.ignoreStateless || false;

<<<<<<< HEAD
<<<<<<< HEAD
    /**
     * Checks if the component is ignored
     * @param {Object} component The component being checked.
     * @returns {boolean} True if the component is ignored, false if not.
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
    const MULTI_COMP_MESSAGE = 'Declare only one React component per file';

    /**
     * Checks if the component is ignored
     * @param {Object} component The component being checked.
     * @returns {Boolean} True if the component is ignored, false if not.
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
    /**
     * Checks if the component is ignored
     * @param {Object} component The component being checked.
     * @returns {boolean} True if the component is ignored, false if not.
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
     */
    function isIgnored(component) {
      return (
        ignoreStateless && (
<<<<<<< HEAD
<<<<<<< HEAD
          /Function/.test(component.node.type)
          || utils.isPragmaComponentWrapper(component.node)
=======
          /Function/.test(component.node.type) ||
          utils.isPragmaComponentWrapper(component.node)
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
          /Function/.test(component.node.type) ||
          utils.isPragmaComponentWrapper(component.node)
=======
          /Function/.test(component.node.type)
          || utils.isPragmaComponentWrapper(component.node)
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        )
      );
    }

<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    return {
      'Program:exit'() {
        if (components.length() <= 1) {
          return;
        }

<<<<<<< HEAD
<<<<<<< HEAD
        values(components.list())
          .filter((component) => !isIgnored(component))
          .slice(1)
          .forEach((component) => {
            report(context, messages.onlyOneComponent, 'onlyOneComponent', {
              node: component.node,
            });
          });
      },
    };
  }),
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
        const list = components.list();

        Object.keys(list).filter(component => !isIgnored(list[component])).forEach((component, i) => {
          if (i >= 1) {
            context.report({
              node: list[component].node,
              message: MULTI_COMP_MESSAGE
            });
          }
        });
      }
    };
  })
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
        values(components.list())
          .filter((component) => !isIgnored(component))
          .slice(1)
          .forEach((component) => {
            report(context, messages.onlyOneComponent, 'onlyOneComponent', {
              node: component.node,
            });
          });
      },
    };
  }),
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
};
