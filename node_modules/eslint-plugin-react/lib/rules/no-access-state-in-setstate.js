/**
 * @fileoverview Prevent usage of this.state within setState
 * @author Rolf Erik Lekang, JÃ¸rgen Aaberg
 */

'use strict';

const docsUrl = require('../util/docsUrl');
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
const astUtil = require('../util/ast');
const componentUtil = require('../util/componentUtil');
const report = require('../util/report');
const getScope = require('../util/eslint').getScope;
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
const messages = {
  useCallback: 'Use callback in setState when referencing the previous state.',
};

/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  meta: {
    docs: {
      description: 'Disallow when this.state is accessed within setState',
      category: 'Possible Errors',
      recommended: false,
      url: docsUrl('no-access-state-in-setstate'),
    },

    messages,
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
module.exports = {
  meta: {
    docs: {
      description: 'Reports when this.state is accessed within setState',
      category: 'Possible Errors',
      recommended: false,
      url: docsUrl('no-access-state-in-setstate')
    }
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
const messages = {
  useCallback: 'Use callback in setState when referencing the previous state.',
};

/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  meta: {
    docs: {
      description: 'Disallow when this.state is accessed within setState',
      category: 'Possible Errors',
      recommended: false,
      url: docsUrl('no-access-state-in-setstate'),
    },

    messages,
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
  },

  create(context) {
    function isSetStateCall(node) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      return astUtil.isCallExpression(node)
        && node.callee.property
        && node.callee.property.name === 'setState'
        && node.callee.object.type === 'ThisExpression';
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
      return node.type === 'CallExpression' &&
        node.callee.property &&
        node.callee.property.name === 'setState' &&
        node.callee.object.type === 'ThisExpression';
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
      return astUtil.isCallExpression(node)
        && node.callee.property
        && node.callee.property.name === 'setState'
        && node.callee.object.type === 'ThisExpression';
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    }

    function isFirstArgumentInSetStateCall(current, node) {
      if (!isSetStateCall(current)) {
        return false;
      }
      while (node && node.parent !== current) {
        node = node.parent;
      }
      return current.arguments[0] === node;
    }

<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
    /**
     * @param {ASTNode} node
     * @returns {boolean}
     */
    function isClassComponent(node) {
      return !!(
        componentUtil.getParentES6Component(context, node)
        || componentUtil.getParentES5Component(context, node)
      );
    }

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    // The methods array contains all methods or functions that are using this.state
    // or that are calling another method or function using this.state
    const methods = [];
    // The vars array contains all variables that contains this.state
    const vars = [];
    return {
      CallExpression(node) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        if (!isClassComponent(node)) {
          return;
        }
        // Appends all the methods that are calling another
        // method containing this.state to the methods array
        methods.forEach((method) => {
          if ('name' in node.callee && node.callee.name === method.methodName) {
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
        // Appends all the methods that are calling another
        // method containing this.state to the methods array
        methods.forEach((method) => {
          if (node.callee.name === method.methodName) {
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
        if (!isClassComponent(node)) {
          return;
        }
        // Appends all the methods that are calling another
        // method containing this.state to the methods array
        methods.forEach((method) => {
          if ('name' in node.callee && node.callee.name === method.methodName) {
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
            let current = node.parent;
            while (current.type !== 'Program') {
              if (current.type === 'MethodDefinition') {
                methods.push({
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                  methodName: 'name' in current.key ? current.key.name : undefined,
                  node: method.node,
=======
                  methodName: current.key.name,
                  node: method.node
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
                  methodName: current.key.name,
                  node: method.node
=======
                  methodName: 'name' in current.key ? current.key.name : undefined,
                  node: method.node,
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
                  methodName: 'name' in current.key ? current.key.name : undefined,
                  node: method.node,
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
                });
                break;
              }
              current = current.parent;
            }
          }
        });

        // Finding all CallExpressions that is inside a setState
        // to further check if they contains this.state
        let current = node.parent;
        while (current.type !== 'Program') {
          if (isFirstArgumentInSetStateCall(current, node)) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            const methodName = 'name' in node.callee ? node.callee.name : undefined;
            methods.forEach((method) => {
              if (method.methodName === methodName) {
                report(context, messages.useCallback, 'useCallback', {
                  node: method.node,
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
            const methodName = node.callee.name;
            methods.forEach((method) => {
              if (method.methodName === methodName) {
                context.report({
                  node: method.node,
                  message: 'Use callback in setState when referencing the previous state.'
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
            const methodName = 'name' in node.callee ? node.callee.name : undefined;
            methods.forEach((method) => {
              if (method.methodName === methodName) {
                report(context, messages.useCallback, 'useCallback', {
                  node: method.node,
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
                });
              }
            });

            break;
          }
          current = current.parent;
        }
      },

      MemberExpression(node) {
        if (
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          'name' in node.property
          && node.property.name === 'state'
          && node.object.type === 'ThisExpression'
          && isClassComponent(node)
        ) {
          /** @type {import("eslint").Rule.Node} */
=======
          node.property.name === 'state' &&
          node.object.type === 'ThisExpression'
        ) {
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
          node.property.name === 'state' &&
          node.object.type === 'ThisExpression'
        ) {
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
          'name' in node.property
          && node.property.name === 'state'
          && node.object.type === 'ThisExpression'
          && isClassComponent(node)
        ) {
          /** @type {import("eslint").Rule.Node} */
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
          let current = node;
          while (current.type !== 'Program') {
            // Reporting if this.state is directly within this.setState
            if (isFirstArgumentInSetStateCall(current, node)) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
              report(context, messages.useCallback, 'useCallback', {
                node,
=======
              context.report({
                node,
                message: 'Use callback in setState when referencing the previous state.'
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
              context.report({
                node,
                message: 'Use callback in setState when referencing the previous state.'
=======
              report(context, messages.useCallback, 'useCallback', {
                node,
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
              report(context, messages.useCallback, 'useCallback', {
                node,
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
              });
              break;
            }

            // Storing all functions and methods that contains this.state
            if (current.type === 'MethodDefinition') {
              methods.push({
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                methodName: 'name' in current.key ? current.key.name : undefined,
                node,
              });
              break;
            } else if (
              current.type === 'FunctionExpression'
              && 'key' in current.parent
              && current.parent.key
            ) {
              methods.push({
                methodName: 'name' in current.parent.key ? current.parent.key.name : undefined,
                node,
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
                methodName: current.key.name,
                node
              });
              break;
            } else if (current.type === 'FunctionExpression' && current.parent.key) {
              methods.push({
                methodName: current.parent.key.name,
                node
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
                methodName: 'name' in current.key ? current.key.name : undefined,
                node,
              });
              break;
            } else if (
              current.type === 'FunctionExpression'
              && 'key' in current.parent
              && current.parent.key
            ) {
              methods.push({
                methodName: 'name' in current.parent.key ? current.parent.key.name : undefined,
                node,
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
              });
              break;
            }

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            // Storing all variables containing this.state
            if (current.type === 'VariableDeclarator') {
              vars.push({
                node,
                scope: getScope(context, node),
                variableName: 'name' in current.id ? current.id.name : undefined,
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
            // Storing all variables containg this.state
            if (current.type === 'VariableDeclarator') {
              vars.push({
                node,
                scope: context.getScope(),
                variableName: current.id.name
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
            // Storing all variables containing this.state
            if (current.type === 'VariableDeclarator') {
              vars.push({
                node,
                scope: getScope(context, node),
                variableName: 'name' in current.id ? current.id.name : undefined,
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
              });
              break;
            }

            current = current.parent;
          }
        }
      },

      Identifier(node) {
        // Checks if the identifier is a variable within an object
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        /** @type {import("eslint").Rule.Node} */
=======
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
        /** @type {import("eslint").Rule.Node} */
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
=======
        /** @type {import("eslint").Rule.Node} */
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
        let current = node;
        while (current.parent.type === 'BinaryExpression') {
          current = current.parent;
        }
        if (
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          ('value' in current.parent && current.parent.value === current)
          || ('object' in current.parent && current.parent.object === current)
=======
          current.parent.value === current ||
          current.parent.object === current
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
          current.parent.value === current ||
          current.parent.object === current
=======
          ('value' in current.parent && current.parent.value === current)
          || ('object' in current.parent && current.parent.object === current)
>>>>>>> 6be43a322 (figuring out lint)
<<<<<<< HEAD
>>>>>>> 84b8e337c (figuring out lint)
=======
=======
          ('value' in current.parent && current.parent.value === current)
          || ('object' in current.parent && current.parent.object === current)
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> ee12506f5 (figuring out lint)
        ) {
          while (current.type !== 'Program') {
            if (isFirstArgumentInSetStateCall(current, node)) {
              vars
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                .filter((v) => v.scope === getScope(context, node) && v.variableName === node.name)
                .forEach((v) => {
                  report(context, messages.useCallback, 'useCallback', {
                    node: v.node,
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
                .filter(v => v.scope === context.getScope() && v.variableName === node.name)
                .forEach((v) => {
                  context.report({
                    node: v.node,
                    message: 'Use callback in setState when referencing the previous state.'
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
                .filter((v) => v.scope === getScope(context, node) && v.variableName === node.name)
                .forEach((v) => {
                  report(context, messages.useCallback, 'useCallback', {
                    node: v.node,
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
                  });
                });
            }
            current = current.parent;
          }
        }
      },

      ObjectPattern(node) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        const isDerivedFromThis = 'init' in node.parent && node.parent.init && node.parent.init.type === 'ThisExpression';
        node.properties.forEach((property) => {
          if (
            property
            && 'key' in property
            && property.key
            && 'name' in property.key
            && property.key.name === 'state'
            && isDerivedFromThis
          ) {
            vars.push({
              node: property.key,
              scope: getScope(context, node),
              variableName: property.key.name,
            });
          }
        });
      },
    };
  },
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
        const isDerivedFromThis = node.parent.init && node.parent.init.type === 'ThisExpression';
        node.properties.forEach((property) => {
          if (property && property.key && property.key.name === 'state' && isDerivedFromThis) {
            vars.push({
              node: property.key,
              scope: context.getScope(),
              variableName: property.key.name
            });
          }
        });
      }
    };
  }
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
        const isDerivedFromThis = 'init' in node.parent && node.parent.init && node.parent.init.type === 'ThisExpression';
        node.properties.forEach((property) => {
          if (
            property
            && 'key' in property
            && property.key
            && 'name' in property.key
            && property.key.name === 'state'
            && isDerivedFromThis
          ) {
            vars.push({
              node: property.key,
              scope: getScope(context, node),
              variableName: property.key.name,
            });
          }
        });
      },
    };
  },
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
};
