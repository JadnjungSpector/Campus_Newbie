'use strict';

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
const open = require('opn');
const colors = require('./colors');

function status(uri, options, log, useColor) {
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
=======
>>>>>>> ee12506f5 (figuring out lint)
const logger = require('webpack-log');
const colors = require('./colors');
const runOpen = require('./runOpen');

// TODO: don't emit logs when webpack-dev-server is used via Node.js API
function status(uri, options, log, useColor) {
  if (options.quiet === true) {
    // Add temporary logger to output just the status of the dev server
    log = logger({
      name: 'wds',
      level: 'info',
      timestamp: options.logTime,
    });
  }

<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
const open = require('opn');
const colors = require('./colors');

function status(uri, options, log, useColor) {
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
  const contentBase = Array.isArray(options.contentBase)
    ? options.contentBase.join(', ')
    : options.contentBase;

  if (options.socket) {
    log.info(`Listening to socket at ${colors.info(useColor, options.socket)}`);
  } else {
    log.info(`Project is running at ${colors.info(useColor, uri)}`);
  }

  log.info(
    `webpack output is served from ${colors.info(useColor, options.publicPath)}`
  );

  if (contentBase) {
    log.info(
      `Content not from webpack is served from ${colors.info(
        useColor,
        contentBase
      )}`
    );
  }

  if (options.historyApiFallback) {
    log.info(
      `404s will fallback to ${colors.info(
        useColor,
        options.historyApiFallback.index || '/index.html'
      )}`
    );
  }

  if (options.bonjour) {
    log.info(
      'Broadcasting "http" with subtype of "webpack" via ZeroConf DNS (Bonjour)'
    );
  }

  if (options.open) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    let openOptions = {};
    let openMessage = 'Unable to open browser';

    if (typeof options.open === 'string') {
      openOptions = { app: options.open };
      openMessage += `: ${options.open}`;
    }

    open(uri + (options.openPage || ''), openOptions).catch(() => {
      log.warn(
        `${openMessage}. If you are running in a headless environment, please do not use the --open flag`
      );
    });
=======
    runOpen(uri, options, log);
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======
>>>>>>> ee12506f5 (figuring out lint)
    runOpen(uri, options, log);
=======
=======
>>>>>>> 6be43a322 (figuring out lint)
    let openOptions = {};
    let openMessage = 'Unable to open browser';

    if (typeof options.open === 'string') {
      openOptions = { app: options.open };
      openMessage += `: ${options.open}`;
    }

    open(uri + (options.openPage || ''), openOptions).catch(() => {
      log.warn(
        `${openMessage}. If you are running in a headless environment, please do not use the --open flag`
      );
    });
<<<<<<< HEAD
>>>>>>> 6be43a322 (figuring out lint)
=======
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
  }
}

module.exports = status;
