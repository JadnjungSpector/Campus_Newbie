'use strict';
<<<<<<< HEAD
<<<<<<< HEAD

var SockJS = require('sockjs-client/dist/sockjs');

var retries = 0;
var sock = null;

var socket = function initSocket(url, handlers) {
  sock = new SockJS(url);

  sock.onopen = function onopen() {
    retries = 0;
  };

  sock.onclose = function onclose() {
=======
=======
>>>>>>> 84b8e337c (figuring out lint)
/* global __webpack_dev_server_client__ */

/* eslint-disable
  camelcase
*/
// this SockJSClient is here as a default fallback, in case inline mode
// is off or the client is not injected. This will be switched to
// WebsocketClient when it becomes the default
// important: the path to SockJSClient here is made to work in the 'client'
// directory, but is updated via the webpack compilation when compiled from
// the 'client-src' directory

var Client = typeof __webpack_dev_server_client__ !== 'undefined' ? __webpack_dev_server_client__ : // eslint-disable-next-line import/no-unresolved
require('./clients/SockJSClient');
var retries = 0;
var client = null;

var socket = function initSocket(url, handlers) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
  });
  client.onClose(function () {
<<<<<<< HEAD
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
=======

var SockJS = require('sockjs-client/dist/sockjs');

var retries = 0;
var sock = null;

var socket = function initSocket(url, handlers) {
  sock = new SockJS(url);

  sock.onopen = function onopen() {
    retries = 0;
  };

  sock.onclose = function onclose() {
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


<<<<<<< HEAD
<<<<<<< HEAD
    sock = null; // After 10 retries stop trying, to prevent logspam.
=======
    client = null; // After 10 retries stop trying, to prevent logspam.
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
    client = null; // After 10 retries stop trying, to prevent logspam.
=======
    sock = null; // After 10 retries stop trying, to prevent logspam.
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)

    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(function () {
        socket(url, handlers);
      }, retryInMs);
    }
<<<<<<< HEAD
<<<<<<< HEAD
  };

  sock.onmessage = function onmessage(e) {
    // This assumes that all data sent via the websocket is JSON.
    var msg = JSON.parse(e.data);
=======
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);
=======
  };

  sock.onmessage = function onmessage(e) {
    // This assumes that all data sent via the websocket is JSON.
    var msg = JSON.parse(e.data);
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)

    if (handlers[msg.type]) {
      handlers[msg.type](msg.data);
    }
<<<<<<< HEAD
<<<<<<< HEAD
  };
=======
  });
>>>>>>> cbaeadb69664be713d49558df22b6f02c48f3384
=======
  });
=======
  };
>>>>>>> 6be43a322 (figuring out lint)
>>>>>>> 84b8e337c (figuring out lint)
};

module.exports = socket;